Question One: What is software engineering, and how does it differ from traditional programming?

    Software engineering is the systematic application of engineering principles, methods and tools to the development 
    and maintenance of high quality software systems. It involves the design, development, testing, deployment and 
    maintenance of software products. while traditional programming refers to the process of writing down specific sets of 
    instructions for a computer to execute. According to Anto Semeraro "Programming can be seen as a subset of software 
    engineering, a craft focused on the art of writing code, and the primary concern is to have all the code functions as 
    intended, solving specific problems, or performing certain operations. On the other hand, software engineering 
    encompasses a broader spectrum, which includes not only the act of writing code but also the 
    structured process of developing, maintaining, and managing software projects."

Question Two: Explain the various phases of the Software Development Life Cycle. Provide a brief description of each phase.

    The software development life cycle(SDLC) is a model that guides software engineering teams on how to efficiently and 
    effectively design and build high-quality softwares. 
    It has six stages which are:
    The requirement phase where the teams gather and document user needs and system requirements.

    The Design Phase where the teams create a high-level and detailed designs of the software architecture and user interface.

    The Implementation phase which is where the programmers step in to write codes and build the software
     according to desing specifications.   

    The testing phase where various tests are conducted to ensure the software meets quality standards and functions. 

    The deployment phase is the stage where the software is released to users or customers.

    The maintenance phase is the stage where ongoing support is provided, together with updates and enhancements to the 
    software after deployment.

Question Three: Compare and contrast the Agile and Waterfall models of software development. 
What are the key differences, and in what scenarios might each be preferred?

    Software development models are various processes or methods that are chosen for project development depending on the objectives and goals 
    of the project. Agile and Waterfall are some of the models of software development. Others include scrum, spiral, prototype, incremental, e.t.c.
    
    The Waterfall model
    The waterfall model is linear and sequential, which means that a development phase cannot begin until the previous phase is completed.
    i.e the development phases will never overlap. Using the SDLC as an example, in an organization, this means that the project will first pass
    through the requirement phase. After the phase is completed and finalized, The project is moved to the second phase which is the desgin phase.
    After everything has been approved and finalized, the project proceeds to the Implementation stage. It carries on this way, until it gets to
    the final stage which is the maintenance stage.

    The Agile model
    The agile model is an exact opposit of the waterfall stage. it is a type of software development methodology that anticipates the need 
    for flexibility and applies a level of pragmatism to the delivery of the finished product. It also emphasizes the importance of team 
    collaboration and delivering a working product quickly to meet customer needs and expectations. 

    The key differences between the two models is that one adopts a linear top to bottom approach, while the other adopts an iterative approach
    to software development. Another key difference is that the waterfall model is most convenient for short term projects, while the agile
    model is more convenient for long term projects. 

Question Four: What is requirements engineering? Describe the process and its importance in the software development lifecycle.
    Requirements engineering (RE) refers to the process of defining, documenting, and maintaining requirements in the engineering design process. Requirement engineering provides the appropriate mechanism to understand what the customer desires, analyzing the need, and assessing feasibility, negotiating a reasonable solution,
    specifying the solution clearly, validating the specifications and managing the requirements as they are transformed into a working system.
    It offers an effective platform for identifying the wishes of the client by evaluating their requirements, determining its viability, discussing 
    and defining a fair solution, verifying the criteria, and handling requirements as they are converted into a working system. 
     